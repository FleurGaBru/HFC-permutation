PREFIX = ["cleaned_notstrict_hfc"]
RANGE = [range(1,6)]
# configfile: "config.yaml"
# REPLICATE = config["replicate"]
# NUMBER = config["number"]
# SAMPLES = ["cleaned_notstrict_hfc"]
# FORMAT = ["map", "ped"]
#change that name of initial ped/map name is given by the params. Maybe generate it automatically (look for ped/map file pair in data)
# add the second extension (ped) to the input with expand {ext} ext=[]
rule generate_bed:
    input:
        ped= expand("data/{prefix}.ped", prefix=PREFIX),
        map= expand("data/{prefix}.map", prefix=PREFIX)
    output:
        expand("permutation/{prefix}.{ext}", prefix=PREFIX, ext=["bed", "bim", "fam"])
    shell:
        "plink2 --allow-extra-chr --chr-set 33 --ped {input.ped} --map {input.map} --make-bed --out permutation/{PREFIX}"

# if you want to run this rule, you have to replcae {replicate} by a number!
# number of SNPs has to be parameter
# a variable in a bash command in python does not require "$"
# a range in python does not include the last number range(1,6)=[1,2,3,4,5]
rule sample_bed:
    input:
        bed= expand("permutation/{prefix}.bed", prefix = PREFIX),
        bim= expand("permutation/{prefix}.bim", prefix = PREFIX),
        fam= expand("permutation/{prefix}.fam", prefix = PREFIX)
    output:
        dynamic("permutation/{prefix}.{chunk}.{ext}")
    params:
        SNP = [1000]
    run:
     for i in range(1,6):
        shell("plink2 --allow-extra-chr --chr-set 33 --bed {input.bed} --bim {input.bim} --fam {input.fam} --thin-count {params.SNP} --make-bed --out ./permutation/{wildcards.prefix}.{i}")



rule recode_bed
    input:
        "permutation/{sample}_1000_{replicate}.bed"
    output:
        "permutation/{sample_}"
