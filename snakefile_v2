NAME= ["cleaned_notstrict_hfc"]
# configfile: "config.yaml"
# REPLICATE = config["replicate"]
# NUMBER = config["number"]
# SAMPLES = ["cleaned_notstrict_hfc"]
# FORMAT = ["map", "ped"]
#change that name of initial ped/map name is given by the params. Maybe generate it automatically (look for ped/map file pair in data)
# add the second extension (ped) to the input with expand {ext} ext=[]
rule generate_bed:
    input:
        ped= "data/cleaned_notstrict_hfc.ped",
        map= "data/cleaned_notstrict_hfc.map"
        # expand("data/{sample}.{ext}", sample=config["samples"], ext=FORMAT)
        # lambda wildcards: config["samples"][wildcards.sample]
    output:
        expand("permutation/cleaned_notstrict_hfc.{ext}", ext=["bed", "bim", "fam"])
    shell:
        "plink2 --allow-extra-chr --chr-set 33 --ped {input.ped} --map {input.map} --make-bed --out permutation/cleaned_notstrict_hfc"

#plink2 --allow-extra-chr --chr-set 33 --ped data/cleaned_notstrict_hfc.ped --map data/cleaned_notstrict_hfc.map --make-bed --out permutation/cleaned_notstrict_hfc.bed permutation/cleaned_notstrict_hfc.bim permutation/cleaned_notstrict_hfc.fam

# if you want to run this rule, you have to replcae {replicate} by a number!
# number of SNPs has to be parameter
# a variable in a bash command in python does not require "$"
# a range in python does not include the last number range(1,6)=[1,2,3,4,5]
rule sample_bed:
    input:
        "permutation/{sample}.bed"
    output:
        dynamic("permutation/{sample}.{rep}.bed)"
    params:
        snp=config["number"]
    run:
     for i in range(1,6):
        "plink2 --allow-extra-chr --chr-set 33 --bfile ./permutation/{wildcards.sample} --thin-count {params.snp} --make-bed --out ./permutation/{wildcards.sample}".format(i)



rule recode_bed
    input:
        "permutation/{sample}_1000_{replicate}.bed"
    output:
        "permutation/{sample_}"
